Eclipse -> Runtime - jdk (1.8)
Spring initializer -> create new project (dependency - spring web)
Lab 1. Service Provider (day1.demo1.RestProvider)
	Create a project , download zip , extract in current workspace and write simple code as server 
		public String hello(){
			return "<html><h1>Hello World !!</h1></html>";
		}


Lab 2. Service COnsumer (day1.demo2.RestConsumer)
	Create a maven project (simple)
		Modify pom file to include 
		<dependencies>
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-web -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>5.3.5</version>
		</dependency>
	</dependencies>
	
	Write a class RestConsumer with main method
		public static void main(String[] args) {
			// TODO Auto-generated method stub
			RestTemplate resttemplate = new RestTemplate();
			String str = resttemplate.getForObject("http://localhost:8080", String.class);
			System.out.println(str);
		}

Lab 3  - Spring Eureka Server
	Spring Initializer
		Day1.demo3.EurekaServer, Dependency - Eureka Server
		
	Create demo.EurekaServerApplication.java 
		package demo;

		import org.springframework.boot.SpringApplication;
		import org.springframework.boot.autoconfigure.SpringBootApplication;
		import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

		@SpringBootApplication
		@EnableEurekaServer
		public class EurekaServerApplication {

			public static void main(String[] args) {
				SpringApplication.run(EurekaServerApplication.class, args);
			}

		}
	
	Create application.properties (src/main/resources)
		server.port=8761
		eureka.client.register-with-eureka=false
		eureka.client.fetch-registry=false
		
	Run application
		http://localhost:8761
		
	Create a maven app
	
	Spring Initializer
		Day1.demo3.RegisterEurekaClient, Dependency - EurekaClient, Web
	
	Write RegisterEurekaClientApplication.java
	
		package demo;

		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.boot.SpringApplication;
		import org.springframework.boot.autoconfigure.SpringBootApplication;
		import org.springframework.cloud.netflix.eureka.EnableEurekaClient;

		import com.netflix.discovery.DiscoveryClient;

		@SpringBootApplication
		@EnableEurekaClient
		public class RegisterEurekaClientApplication {

			public static void main(String[] args) {
				SpringApplication.run(RegisterEurekaClientApplication.class, args);
			}

		}

	Write MyController.java
		package demo;

		import org.springframework.web.bind.annotation.GetMapping;
		import org.springframework.web.bind.annotation.RestController;

		@RestController
		public class MyController {
			@GetMapping(value="/myapp")
			public String hello(){
				System.out.println("hello from MyController invoked ");
				return "<h1>Hello</h1>";
			}
		}

	Write application.properties
	server.port=8086
	spring.application.name=client1
	eureka.client.register-with-eureka=true
	eureka.client.fetch-registry=false

	Run the application
	Test - http://localhost:8761	
			in application should be able to see client1 
			



Create Maven Aapp - Day1.demo3.FetchEurekaClient
		Maven Dependencies -> EurekaClient, web
	
	Write FetchEurekaClientApplication.java
		@EnableEurekaClient
	Application.properites
	server.port=8080
	spring.application.name=client2
	eureka.client.register-with-eureka=false
	eureka.client.fetch-registry=true

	Write MyController to show a simple message 
	

Create Maven Aapp - Day1.demo3.FetchEurekaClient
		Maven Dependencies -> EurekaClient, web
	
	Create FetchEurekaClientApplication.java
		package demo;

		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.boot.SpringApplication;
		import org.springframework.boot.autoconfigure.SpringBootApplication;
		import org.springframework.cloud.client.loadbalancer.LoadBalanced;
		import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
		import org.springframework.context.annotation.Bean;
		import org.springframework.web.client.RestTemplate;

		import com.netflix.discovery.DiscoveryClient;

		@SpringBootApplication
		@EnableEurekaClient
		public class FetchEurekaClientApplication {

			@LoadBalanced
			@Bean
			public RestTemplate resttemplate(){
				return new RestTemplate();
			}
			
			public static void main(String[] args) {
				SpringApplication.run(FetchEurekaClientApplication.class, args);
			}

		}

	Create MyController.java
		package demo;

		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.cloud.client.loadbalancer.LoadBalanced;
		import org.springframework.web.bind.annotation.GetMapping;
		import org.springframework.web.bind.annotation.RestController;
		import org.springframework.web.client.RestTemplate;

		@RestController
		public class MyController {
			@Autowired
			private RestTemplate resttemplate;
			
			@GetMapping(value="/")
			public String hello(){
				System.out.println("hello from MyController invoked ");
			//invoke Client1 url and then return that data as String....
				
				String str = resttemplate.getForObject("http://client1/myapp", String.class);
				return "<h1>Getting data from Client 1 <h1><br/> The Data is  "+ str;
			}
		}

	application.properties
		server.port=80
		spring.application.name=client2
		eureka.client.register-with-eureka=false
		eureka.client.fetch-registry=true

	Test -> http://localhost:80
	Modify Register code to change port and color of h1 tag, run
	Test -> http://localhost:80 (output should be load balanced)
	
	
	
